Here’s a detailed breakdown of the first step: Resume Parsing. I will provide code for creating the FastAPI backend, React frontend setup, and database integration with PostgreSQL.

1. Project Directory Structure
csharp
Copy code
HR-Feature-Project/
│
├── backend/
│   ├── app/
│   │   ├── __init__.py
│   │   ├── main.py  # FastAPI entry point
│   │   ├── parsers.py  # Resume parsing logic
│   │   ├── models.py  # Database models
│   │   ├── database.py  # Database connection
│   │   └── schemas.py  # Pydantic schemas
│   └── requirements.txt  # Python dependencies
│
└── frontend/
    ├── public/
    ├── src/
    │   ├── components/
    │   │   ├── ResumeUploader.js
    │   ├── App.js
    │   ├── index.js
    └── package.json
Step 1: Backend - FastAPI Setup
1.1 Database Configuration (backend/app/database.py)
python
Copy code
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

SQLALCHEMY_DATABASE_URL = "postgresql://user:password@localhost/dbname"  # Adjust this

engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
1.2 Database Models (backend/app/models.py)
python
Copy code
from sqlalchemy import Column, Integer, String, Text
from .database import Base

class Candidate(Base):
    __tablename__ = "candidates"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    resume_text = Column(Text)
    score = Column(Integer, default=0)
1.3 Pydantic Schemas (backend/app/schemas.py)
python
Copy code
from pydantic import BaseModel

class CandidateCreate(BaseModel):
    name: str
    resume_text: str

class CandidateOut(CandidateCreate):
    id: int
    score: int

    class Config:
        orm_mode = True
1.4 Resume Parsing Logic (backend/app/parsers.py)
python
Copy code
import pdfplumber
from fastapi import UploadFile

def parse_pdf(file: UploadFile):
    text = ""
    with pdfplumber.open(file.file) as pdf:
        for page in pdf.pages:
            text += page.extract_text()
    return text
1.5 FastAPI Main File (backend/app/main.py)
python
Copy code
from fastapi import FastAPI, Depends, File, UploadFile, HTTPException
from sqlalchemy.orm import Session
from .database import engine, Base, get_db
from .models import Candidate
from .parsers import parse_pdf
from .schemas import CandidateCreate, CandidateOut

Base.metadata.create_all(bind=engine)

app = FastAPI()

@app.post("/upload_resume", response_model=CandidateOut)
def upload_resume(file: UploadFile = File(...), db: Session = Depends(get_db)):
    if file.content_type != "application/pdf":
        raise HTTPException(status_code=400, detail="Only PDF files are supported.")

    # Parse the resume
    resume_text = parse_pdf(file)
    candidate = Candidate(name=file.filename, resume_text=resume_text)
    
    db.add(candidate)
    db.commit()
    db.refresh(candidate)
    return candidate
1.6 Dependencies File (backend/requirements.txt)
php
Copy code
fastapi
uvicorn
sqlalchemy
psycopg2-binary
pdfplumber
Step 2: Frontend - React Setup
2.1 frontend/package.json
json
Copy code
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "axios": "^0.27.2"
  }
}
2.2 Resume Uploader Component (frontend/src/components/ResumeUploader.js)
jsx
Copy code
import React, { useState } from "react";
import axios from "axios";

const ResumeUploader = () => {
  const [file, setFile] = useState(null);
  const [uploadStatus, setUploadStatus] = useState("");

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleUpload = async () => {
    if (!file) {
      setUploadStatus("Please select a file first.");
      return;
    }

    const formData = new FormData();
    formData.append("file", file);

    try {
      const response = await axios.post("/upload_resume", formData, {
        headers: {
          "Content-Type": "multipart/form-data"
        }
      });
      setUploadStatus(`Resume uploaded: ${response.data.name}`);
    } catch (error) {
      setUploadStatus(`Error: ${error.response.data.detail}`);
    }
  };

  return (
    <div>
      <h2>Upload Resume</h2>
      <input type="file" onChange={handleFileChange} />
      <button onClick={handleUpload}>Upload</button>
      <p>{uploadStatus}</p>
    </div>
  );
};

export default ResumeUploader;
2.3 Main App Component (frontend/src/App.js)
jsx
Copy code
import React from "react";
import ResumeUploader from "./components/ResumeUploader";

function App() {
  return (
    <div className="App">
      <h1>HR Feature - Resume Upload</h1>
      <ResumeUploader />
    </div>
  );
}

export default App;
2.4 React Entry Point (frontend/src/index.js)
jsx
Copy code
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById("root")
);
Step 3: Running the Project
Backend:

Navigate to the backend folder and install the dependencies using:
bash
Copy code
pip install -r requirements.txt
Run the FastAPI server:
bash
Copy code
uvicorn app.main:app --reload
Frontend:

Navigate to the frontend folder and install the dependencies using:
bash
Copy code
npm install
Start the React application:
bash
Copy code
npm start
Connecting Frontend and Backend
Update the axios base URL in your frontend code to point to your backend server. If running locally, it might look like:
jsx
Copy code
axios.post("http://127.0.0.1:8000/upload_resume", formData, {
This setup establishes the foundational elements of the resume parsing feature. It extracts text from uploaded resumes, stores the extracted text and candidate details in PostgreSQL, and offers a simple React interface to upload resumes.

Would you like to proceed with the next steps or any additional features?






You said:
